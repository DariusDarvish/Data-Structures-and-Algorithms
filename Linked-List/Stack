class Element(object):
    def __init__(self, value):
        self.value = value
        self.next = None
        
class LinkedList(object):
    def __init__(self, head=None):
        self.head = head
        
    def append(self, new_element):
        current = self.head
        if self.head:
            while current.next:
                current = current.next
            current.next = new_element
        else:
            self.head = new_element

    def insert_first(self, new_element):
        "Insert new element as the head of the LinkedList"
        new_node = Element(new_element)
        new_node= new_node.value
        new_node.next = self.head
        self.head = new_node

    def delete_first(self):
        "Delete the first (head) element in the LinkedList as return it"
        current=self.head
        counter=1
        while current:
            if counter==1:
                
                self.delete(current.value)
                
            print(current.value)
            current = current.next
            counter+=1

    def delete(self, value):
        """Delete the first node with a given value."""
        current =self.head
        while current:
            if current.value==value:
                #current value set to the next value
                current.value=current.next.value
                #set next values 
                current.next=current.next.next    


class Stack(object):
    def __init__(self,top=None):
        self.ll = LinkedList(top)

    def push(self, new_element):
        "Push (add) a new element onto the top of the stack"
        current=self.ll
        
        current.insert_first(new_element)
        
        
        
    def pop(self):
        "Pop (remove) the first element off the top of the stack and return it"
        
        
        return(self.ll.delete_first())
