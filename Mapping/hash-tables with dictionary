class HashTable(object):
    def __init__(self):
        self.table = {}

        
    def store(self, string):    
        table=self.table
        hashvalue =self.calculate_hash_value(string)
        if hashvalue not in table:
            table[hashvalue]={string}
        if hashvalue in table:
                table[hashvalue].add(string)
                print(table)
        

    def lookup(self, string):
        """Return the hash value if the
        string is already in the table.
        Return -1 otherwise."""
        table=self.table
        hashvalue =self.calculate_hash_value(string)
        if hashvalue in table:
            return(hashvalue)
        else:
            return -1
        
        
        

    def calculate_hash_value(self, string):
        """Helper function to calulate a
        hash value from a string."""
        hashvalue=(ord(string[0])*100)+ord(string[1])
        return(hashvalue)
    
# Setup
hash_table = HashTable()

# Test calculate_hash_value
# Should be 8568
print (hash_table.calculate_hash_value('UDACITY'))

# Test lookup edge case
# Should be -1
print (hash_table.lookup('UDACITY'))

# Test store

# Should be 8568
print (hash_table.lookup('UDACITY'))

# Test store edge case
hash_table.store('UDACIOUS')
# Should be 8568
print (hash_table.lookup('UDACIOUS'))
